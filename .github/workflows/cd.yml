name: Java CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## create application.yml
      - name: make application.yml
        run: |
          mkdir -p ./api/src/main/resources
          touch ./api/src/main/resources/application.yml
        shell: bash
      - name: deliver application.yml
        run: echo "${{ secrets.APPLICATION }}" > ./api/src/main/resources/application.yml
        shell: bash

      # 빌드 및 테스트 단계.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # push 하기 위해 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 태그 생성
      - name: Generate Tag
        id: generate-tag
        run: |
          DATE=$(date +'%Y%m%d%H%M%S')
          echo "TAG_NAME=v${DATE}" >> $GITHUB_ENV

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_ID }}/honterview:${{ env.TAG_NAME }}

      # Docker 파일을 EC2 서버에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM_KEY }}
          port: 22
          script: |
            if [ ! -z "$(docker ps -q)" ]; then
              docker stop $(docker ps -q)
            fi

            if [ ! -z "$(docker ps -aq)" ]; then
              docker rm $(docker ps -aq)
            fi

            if [ ! -z "$(docker network ls -qf name=honterview)" ]; then
              docker network rm honterview
            fi

            docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            docker pull ${{ secrets.DOCKER_ID }}/honterview:${{ env.TAG_NAME }}

            docker network create honterview
            
            
            docker rmi $(docker images -q)
            
            docker run -d \
              --name honterview \
              --network=honterview \
              -p 8080:8080 \
              -e TZ=Asia/Seoul \
              ${{ secrets.DOCKER_ID }}/honterview:${{ env.TAG_NAME }}

            docker pull redis

            docker run -d \
              --name honterview-redis \
              --network=honterview \
              -p 6379:6379 \
              redis

            docker system prune -f
