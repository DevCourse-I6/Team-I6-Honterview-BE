name: Java CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## create application.yml
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
        shell: bash
      - name: deliver application.yml
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
        shell: bash

      # gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # push 하기 위해 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 태그 추출
      - name: Extract branch or tag name
        id: ref
        run: |
          REF_NAME=${GITHUB_REF#refs/*/}
          echo "::set-output name=name::${REF_NAME//\//-}"

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_ID }}/honterview:${{ steps.ref.outputs.name }}

      # EC2 배포
      - name: Deploy to AWS EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} "
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          
          # Docker 컨테이너 중지 및 제거
          docker stop honterview || true
          docker rm honterview || true
          docker stop honterview-redis || true
          docker rm honterview-redis || true
          
          # 필요시 Docker 네트워크 생성 (예시)
          docker network ls | grep honterview || docker network create honterview
          
          # Docker 이미지 업데이트
          docker pull ${{ secrets.DOCKER_ID }}/honterview:${{ steps.extract_tag.outputs.tag }}
          
          # Docker 컨테이너 실행
          docker run -d --name honterview \
            --network=honterview \
            -p 8080:8080 \
            -e TZ=Asia/Seoul \
            ${{ secrets.DOCKER_ID }}/honterview:${{ steps.extract_tag.outputs.tag }}
          
          docker pull redis

          docker run -d \
            --name honterview-redis \
            --network=honterview \
            -p 6379:6379 \
            redis

          docker system prune -f
          "
